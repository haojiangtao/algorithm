#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <unordered_map>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class PartisanGame {
public:
	string getWinner(int, vector <int>, vector <int>);
};

const int maxn = 20010;
const int maxm = 10000;

bool x[maxn], y[maxn];

bool check(const int k) {
    for (int i = 0; i < maxm; ++ i) {
        if (x[maxm + i] != x[maxm + i % k]) return 0;
    }
    return 1;
}

string PartisanGame::getWinner(int n, vector<int> a, vector<int> b) {
    clr(x, 0), clr(y, 0);
	for (int i = 1; i < maxn; ++ i) {
        rep (it, a) {
            if (it <= i && y[i - it] == 0) {
                x[i] = 1;
                break;
            }
        }
        rep (it, b) {
            if (it <= i && x[i - it] == 0) {
                y[i] = 1;
                break;
            }
        }
    }
    if (n < maxn) return x[n] ? "Alice" : "Bob";
    for (int k = 1; k < 100; ++ k) {
        if (x[maxm] == x[maxm + k] && check(k)) {
            int idx = maxm + (n - maxm) % k;
            return x[idx] ? "Alice" : "Bob";
        }
    }
    return "Alice";
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	PartisanGame *obj;
	string answer;
	obj = new PartisanGame();
	clock_t startTime = clock();
	answer = obj->getWinner(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 7;
	int t1[] = {3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Alice";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 10;
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4,3,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Bob";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 104982;
	int t1[] = {2,3,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Alice";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 999999999;
	int t1[] = {4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Bob";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000000000;
	int t1[] = {1,2,3,4,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,3,4,5};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Alice";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// 
// Alice and Bob play a game with a pile of stones.
// Initially, there are n stones in the pile.
// The players take alternating turns, Alice goes first.
// 
// 
// 
// 
// 
// You are given two vector <int>s: a and b.
// The elements of a are allowed moves for Alice, and the elements of b are allowed moves for Bob.
// 
// 
// 
// 
// 
// In each turn, the current player must remove some stones from the pile.
// The number of removed stones must be equal to one of the player's allowed moves.
// If a player cannot take a valid turn, they lose the game.
// 
// Assume that both Alice and Bob play the game optimally.
// Return "Alice" if Alice wins, or "Bob" if Bob wins.
// In other words, return "Alice" if and only if the first player has a winning strategy for the given n, a, and b.
// 
// DEFINITION
// Class:PartisanGame
// Method:getWinner
// Parameters:int, vector <int>, vector <int>
// Returns:string
// Method signature:string getWinner(int n, vector <int> a, vector <int> b)
// 
// 
// CONSTRAINTS
// -n will be between 0 and 1,000,000,000, inclusive.  
// -all elements of  a  will be distinct.  
// -all elements of  b  will be distinct.   
// -all elements of  a  will be between 1 and 5, inclusive.  
// -all elements of  b  will be between 1 and 5, inclusive.  
// 
// 
// EXAMPLES
// 
// 0)
// 7
// {3, 4}
// {4}
// 
// Returns: "Alice"
// 
// Alice should take 4 stones from the pile.
// This will leave a pile of only 3 stones.
// In that situation, Bob has no valid move.
// (His only allowed move is 4, but it is not possible to remove 4 stones from a pile of only 3 stones.)
// Thus, Bob loses the game.
// 
// 1)
// 10
// {1}
// {4, 3, 2}
// 
// Returns: "Bob"
// 
// One winning strategy for Bob is to always take 4 stones.
// If Bob follows this strategy, Alice will lose the game during her third turn.
// 
// 2)
// 104982
// {2, 3, 4, 5}
// {2, 5}
// 
// Returns: "Alice"
// 
// 
// 
// 3)
// 999999999
// {4}
// {5}
// 
// Returns: "Bob"
// 
// 
// 
// 4)
// 1000000000
// {1,2,3,4,5}
// {1,2,3,4,5}
// 
// Returns: "Alice"
// 
// 
// 
// END KAWIGIEDIT TESTING









//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
