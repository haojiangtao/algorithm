#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <unordered_map>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstr;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class KthStringAgain {
public:
	string getKth(string, long long);
};

const int maxn = 55;

lint dp[maxn][maxn];

lint solve(const string & s, const string & t) {
    clr(dp, 0);
    dp[0][0] = 1;
    const int n = sz(s);
    const int m = sz(t);
    forn (i, n) form (j, 0, i) if (dp[i][j]) {
        int l = j, r = n - (i - j) - 1;
        if (l >= m || s[i] == t[l]) dp[i + 1][j + 1] += dp[i][j];
        if (r >= m || s[i] == t[r]) dp[i + 1][j] += dp[i][j];
    }
    lint ret = 0;
    form (i, 0, n) ret += dp[n][i];
    return ret;
}

string KthStringAgain::getKth(string s, lint k) {
    lint w = k - 1;
    string ans = "";
    forv (i, s) {
        for (char c = 'a'; c <= 'z'; ++ c) {
            string t = ans + c;
            lint x = solve(s, t);
            if (w < x) {
                ans = t;
                break;
            }
            w -= x;
        }
    }
    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, string p0, long long p1, bool hasAnswer, string p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	KthStringAgain *obj;
	string answer;
	obj = new KthStringAgain();
	clock_t startTime = clock();
	answer = obj->getKth(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p2 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	long long p1;
	string p2;
	
	{
	// ----- test 0 -----
	p0 = "xyz";
	p1 = 5ll;
	p2 = "yzx";
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "abc";
	p1 = 1ll;
	p2 = "abc";
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "abc";
	p1 = 8ll;
	p2 = "cba";
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "topcoder";
	p1 = 58ll;
	p2 = "ooredcpt";
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "aaaabcdeeeghhhhhiijjjkllmmooooqqrrrrssttuuvvvvvwyy";
	p1 = 38517901796974ll;
	p2 = "aaaacdeehhhijklmmqqrsttvvvvwyyvuusrrrooooljjihhgeb";
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given a string s of length m.
// 
// We will now define a collection of exactly 2^m (not necessarily distinct) strings.
// The collection is generated by the following pseudocode:
// 
// 
// start with an empty collection
// for each subset X of the set {1,2,...,m}:
//     take a new string t and initialize it to the given string s
//     for i = 1,2,...,m:
//         if X contains i:
//             reverse the last i characters of t
//     add the string t to the collection
// 
// 
// You are also given a long long k.
// Imagine that we sorted our entire collection lexicographically.
// Find and return the string that will appear k-th in the sorted collection.
// (Note that k is a 1-based index.)
// 
// DEFINITION
// Class:KthStringAgain
// Method:getKth
// Parameters:string, long long
// Returns:string
// Method signature:string getKth(string s, long long k)
// 
// 
// CONSTRAINTS
// -s will consist only of lowercase English letters ('a'-'z').
// -The length of s will be between 1 and 50, inclusive.
// -k will be between 1 and 2^n, inclusive, where n is the length of s.
// 
// 
// EXAMPLES
// 
// 0)
// "xyz"
// 5
// 
// Returns: "yzx"
// 
// Pseudocode will generate the following strings:  
// 
// 
// 
//  "xyz" for X = {} (empty set), 
//  "xyz" for X = {1}, 
//  "xzy" for X = {2}, 
//  "xzy" for X = {1, 2}, 
//  "zyx" for X = {3}, 
//  "zyx" for X = {1, 3}, 
//  "yzx" for X = {2, 3}, 
//  "yzx" for X = {1, 2, 3}. 
// 
// 
// 
// Sorted lexicographically collection: "xyz", "xyz", "xzy", "xzy", "yzx", "yzx", "zyx", "zyx". The 5th string is "yzx".
// 
// 1)
// "abc"
// 1
// 
// Returns: "abc"
// 
// 
// 
// 2)
// "abc"
// 8
// 
// Returns: "cba"
// 
// 
// 
// 3)
// "topcoder"
// 58
// 
// Returns: "ooredcpt"
// 
// 
// 
// 4)
// "aaaabcdeeeghhhhhiijjjkllmmooooqqrrrrssttuuvvvvvwyy"
// 38517901796974
// 
// Returns: "aaaacdeehhhijklmmqqrsttvvvvwyyvuusrrrooooljjihhgeb"
// 
// 
// 
// END KAWIGIEDIT TESTING









//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
