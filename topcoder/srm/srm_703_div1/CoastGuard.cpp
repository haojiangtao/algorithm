#include <vector>
#include <list>
#include <set>
#include <map>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <string>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <unordered_map>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstring;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class CoastGuard {
public:
	int count(vector <int>, vector <int>, vector <int>);
};

class Point {
public:
    int x, y, id;
    
    Point() {}
    Point(const int a, const int b): x(a), y(b) {}
    Point(const int a, const int b, const int c): x(a), y(b), id(c) {}
    
    Point operator - (const Point & a) const {
        return Point(x - a.x, y - a.y);
    }
    
    int operator ^ (const Point & a) const {
        return x * a.y - y * a.x;
    }
    
    bool operator < (const Point & a) const {
        return y < a.y;
    }
};

const int maxn = 55;
const lint mod = 1e9 + 7;

int n;
vector<Point> po, co;
map<lint, lint> dp[maxn][maxn];

lint dfs(const int l, const int r, const lint s, const vint & v) {
    if (sz(v) <= 1) return 1;
    auto it = dp[l][r].find(s);
    if (it != dp[l][r].end()) return it->py;

    lint ans = 0;
    form (k, l, r) {
        lint sl = 0, sr = 0;
        vint pl, pr;
        forn (i, sz(v) - 1) {
            int side = (co[v[i]] - po[k]) ^ (co[v.back()] - po[k]);
            if (side == 0) break;
            if (side < 0) {
                pl.pb(v[i]);
                sl |= 1LL << v[i];
            } else {
                pr.pb(v[i]);
                sr |= 1LL << v[i];
            }
        }
        if (k - l == sz(pl) && r - k == sz(pr)) {
            ans += dfs(l, k - 1, sl, pl) * dfs(k + 1, r, sr, pr);
        }
    }
    return dp[l][r][s] = ans % mod;
}

int CoastGuard::count(vector<int> v, vector<int> x, vector<int> y) {
    n = sz(v);
    sort(all(v));
    
    po.clear();
    co.clear();
    lint state = 0;
    
    forn (i, n) forn (j, n) dp[i][j].clear();
    
    vint u;
    forn (i, n) {
        state |= 1LL << i;
        u.pb(i);
        po.pb(Point(v[i], 0));
        co.pb(Point(x[i], y[i], i));
    }
    sort(all(co));
    return (int)dfs(0, n - 1, state, u);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	CoastGuard *obj;
	int answer;
	obj = new CoastGuard();
	clock_t startTime = clock();
	answer = obj->count(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;
	
	{
	// ----- test 0 -----
	int t0[] = {-2,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {10,10};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {-2,2,98,102};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,100,101};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,1,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {1,109,229,294,589,615,741,822,859,1000};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {546,850,287,452,864,874,529,879,818,589};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {414,176,191,15,764,825,204,477,34,460};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 400;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {-1,0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,0,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 1;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// If you look on a map of Foxland, you will notice that there is a sea to the north of Foxland.
// For the purpose of this problem, the coast is the straight line y = 0.
// The halfplane with y > 0 is the sea, and the opposite halfplane is Foxland.
// 
// 
// Fox Ciel is the commander of the Foxland Coast Guard (FCG).
// One day, a fleet of n enemy warships approached Foxland.
// Luckily, the FCG has exactly n cannons placed along the coast, so Ciel can attack each warship using a different cannon.
// 
// 
// You are given the coordinates of cannons and warships in the vector <int>s d, x, and y.
// Cannon i is located at the point (d[i], 0).
// Warship j is located at the point (x[j], y[j]).
// 
// 
// There are n! possible ways how to assign the cannons to the warships.
// A cannon trajectory is the line segment that connects the cannon and the warship. 
// An assignment of cannons to warships is good if all cannon trajectories are disjoint - in other words, if no two trajectories intersect each other.
// 
// 
// Count all good assignments of cannons to warships, and return that count modulo 10^9 + 7.
// 
// DEFINITION
// Class:CoastGuard
// Method:count
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int count(vector <int> d, vector <int> x, vector <int> y)
// 
// 
// CONSTRAINTS
// -n will be between 1 and 50, inclusive.
// -d, x and y will contain exactly n elements.
// -Each element in d will be between -1,000 and 1,000, inclusive.
// -Each element in x will be betwene -1,000 and 1,000, inclusive.
// -Each element in y will be between 1 and 1,000, inclusive.
// -Elements in d will be distinct.
// -All points (x[i], y[i]) will be distinct.
// 
// 
// EXAMPLES
// 
// 0)
// {-2, 2}
// {0, 1}
// {1, 2}
// 
// Returns: 2
// 
// There are two cannons and two warships.
// Both assignments of cannons to warships are good, so we should return 2.
// 
// 1)
// {1,2}
// {1,2}
// {10,10}
// 
// Returns: 1
// 
// This time, the situation looks as follows:
// 
// Cannon 0 is located at (1,0).
// Cannon 1 is located at (2,0).
// Warship 0 is located at (1,10).
// Warship 1 is located at (2,10).
// 
// 
// The only good assignment is (cannon 0 shoots warship 0, cannon 1 shoots warship 1).
// The other assignment is not good: the two cannon trajectories intersect.
// 
// 2)
// {-2, 2, 98, 102}
// {0, 1, 100, 101}
// {1, 2, 1, 2}
// 
// Returns: 4
// 
// 
// 
// 3)
// {1,109,229,294,589,615,741,822,859,1000}
// {546,850,287,452,864,874,529,879,818,589}
// {414,176,191,15,764,825,204,477,34,460}
// 
// Returns: 400
// 
// 
// 
// 4)
// {-1,0,1}
// {0,0,0}
// {1,2,3}
// 
// Returns: 2
// 
// Note that two line segments do also intersect if the endpoint of one segment lies on another segment.
// 
// 5)
// {0}
// {0}
// {1}
// 
// Returns: 1
// 
// 
// 
// END KAWIGIEDIT TESTING








//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
