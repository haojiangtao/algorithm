#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rforn(i, n) for (int i = (n) - 1; i >= 0; -- i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define rform(i, a, b) for (int i = (b); i >= (a); -- i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstring;
typedef pair<int, int> pint;
typedef vector<lint> vlint;
typedef vector<pint> vpint;

class DAGConstruction {
public:
	vector <int> construct(vector <int>);
};

vector <int> DAGConstruction::construct(vector<int> v) {
	vpint s;
    forv (i, v) s.pb({v[i], i});
    sort(all(s));
    vint ans, no;
    no.pb(-1);
    forv (k, s) {
        if (k + 1 < s[k].px) return no;
        forn (i, s[k].px - 1) {
            ans.pb(s[k].py);
            ans.pb(s[i].py);
        }
    }
    return ans;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	DAGConstruction *obj;
	vector <int> answer;
	obj = new DAGConstruction();
	clock_t startTime = clock();
	answer = obj->construct(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	int t0[] = {2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1.clear() /*{}*/;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {1,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,0,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {5,5,5,5,5};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {4,2,2,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {0,1,0,2,1,3,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You are given a vector <int> x with n elements.
// Your task is to construct a directed acyclic graph that satisfies all the conditions listed below, or to determine that such a graph does not exist.
// The graph must look as follows:
// 
// 
// 
// There are n vertices, numbered 0 through n-1.
// There are no self-loops, and each pair of vertices is connected by at most one edge.
// For each i, the number of vertices reachable from vertex i must be exactly x[i]. Note that each node is reachable from itself.
// 
// 
// If there is no such graph exists, return {-1}. (That is, a vector <int> that contains a single element with the value -1.)
// 
// If there are multiple such graphs, you may choose any of them.
// Suppose that the graph you chose contains the edges a[0] -> b[0], a[1] -> b[1], and so on.
// Return the following vector <int>: {a[0], b[0], a[1], b[1], a[2], b[2], ...}.
// 
// DEFINITION
// Class:DAGConstruction
// Method:construct
// Parameters:vector <int>
// Returns:vector <int>
// Method signature:vector <int> construct(vector <int> x)
// 
// 
// NOTES
// -Given a directed graph, vertex y is reachable from vertex x if it is possible to travel from x to y by following a sequence of zero or more directed edges.
// 
// 
// CONSTRAINTS
// -x will contain between 1 and 50 elements, inclusive.
// -Each element in x will be between 1 and |x|, inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// {2, 1}
// 
// Returns: {0, 1 }
// 
// We are looking for a graph with two vertices.
// Additionally, we should be able to reach both vertices from vertex 0 and just a single vertex from vertex 1.
// The graph that contains the edge 0 -> 1 has this property.
// 
// 1)
// {1, 1}
// 
// Returns: { }
// 
// This time the graph should be 2 isolated vertices.
// 
// 2)
// {1, 3, 1}
// 
// Returns: {1, 0, 1, 2 }
// 
// Note that the directions of edges are unrelated to the vertex numbers.
// In this example, the correct answer is the directed acyclic graph that contains the edges 1 -> 0 and 1 -> 2.
// 
// 3)
// {5,5,5,5,5}
// 
// Returns: {-1 }
// 
// This time we are supposed to return a graph with 5 vertices in which each vertex is reachable from each vertex.
// This is only possible if the entire graph is strongly connected.
// An acyclic graph on 5 vertices cannot possibly be strongly connected, so we should return {-1}.
// 
// 4)
// {4,2,2,1}
// 
// Returns: {0, 1, 0, 2, 1, 3, 2, 3 }
// 
// 
// 
// END KAWIGIEDIT TESTING



//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
