#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define pb push_back
#define mp make_pair
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rep(i, a, b) for (int i = (a); i <= (b); ++ i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vs;
typedef pair<int,int> pint;
typedef vector<long long> vlint;

const double maxe = 1e9;

class CatsOnTheCircle {
public:
	double getProb(int, int, int);
};

double power(double p, int n) {
    double ans = 1.0;
    while (n) {
        if (n & 1) ans *= p;
        p *= p;
        n >>= 1;
    }
    return ans;
}

double gamber_ruin(int up, int down, double p) {
    if (p == 0.5) return down * 1.0 / (up + down);
    if (p < 0.5) return 1.0 - gamber_ruin(down, up, 1 - p);
    double e = (1 - p) / p;
    return (power(e, down) - 1.0) / (power(e, up + down) - 1.0);
}

double CatsOnTheCircle::getProb(int n, int k, int prob) {
    double p = prob / maxe; 
    return gamber_ruin(k - 1, n - k - 1, p) * (1.0 - gamber_ruin(1, n - 2, p)) + (1.0 - gamber_ruin(k - 1, n - k - 1, p)) * gamber_ruin(n - 2, 1, p);
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	CatsOnTheCircle *obj;
	double answer;
	obj = new CatsOnTheCircle();
	clock_t startTime = clock();
	answer = obj->getProb(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p3 - answer) <= 1e-9 * max(1.0, fabs(p3));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	double p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 1;
	p2 = 300000000;
	p3 = 0.6999999999999985;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 6;
	p1 = 2;
	p2 = 500000000;
	p3 = 0.2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 6;
	p1 = 5;
	p2 = 500000000;
	p3 = 0.2;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 2;
	p2 = 666666666;
	p3 = 0.00391389439551009;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 999999999;
	p1 = 999999996;
	p2 = 777777777;
	p3 = 0.05830903870125612;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1000000000;
	p1 = 4;
	p2 = 300000000;
	p3 = 0.044981259448371;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 6 -----
	p0 = 534428790;
	p1 = 459947197;
	p2 = 500000000;
	p3 = 1.871156682766205E-9;
	all_right = KawigiEdit_RunTest(6, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
