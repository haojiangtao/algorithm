#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define px first
#define py second
#define pb push_back
#define mp make_pair
#define pque priority_queue
#define lowbit(x) ((x) & -(x))
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define rep(it, v) for (auto it : v)
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define form(i, a, b) for (int i = (a); i <= (b); ++ i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)
#define iter(it, v) for (auto it = v.begin(); it != v.end(); ++ it)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vstring;
typedef pair<int,int> pint;
typedef vector<long long> vlint;

const int maxn = 55;
const int inf = 1000000;

int num;
vint ans;
int w[maxn][maxn];

class AllGraphCuts {
public:
	vector <int> findGraph(vector <int>);
};

bool dfs(const vint & v) {
    int n = sz(v);
    if (n == 1) return 1;
    int m = inf;
    for (int i = 0; i < n; ++ i) {
        for (int j = i + 1; j < n; ++ j) {
            m = min(m, w[v[i]][v[j]]);
        }
    }
    int cnt = 0;
    vint g(n, -1);
    for (int i = 0 ; i < n; ++ i) {
        if (g[i] != -1) continue;
        g[i] = cnt;
        for (int j = i; j < n; ++ j) {
            if (g[j] != -1) continue;
            if (m < w[v[i]][v[j]]) {
                g[j] = cnt;
            }
        }
        ++ cnt;
    }
    for (int i = 0; i < n; ++ i) {
        for (int j = i + 1; j < n; ++ j) {
            if ((m == w[v[i]][v[j]]) == (g[i] == g[j])) {
                return 0;
            }
        }
    }
    for (int k = 0; k < cnt; ++ k) {
        vint vi;
        for (int i = 0; i < n; ++ i) {
            if (g[i] == k) {
                vi.pb(v[i]);
            }
        }
        if (! dfs(vi)) return 0;
        if (k != 0) {
            ans.pb(m * num * num + v[0] * num + vi[0]);
        }
    }
    return 1;
}

vector<int> AllGraphCuts::findGraph(vector<int> x) {
	int n = 1;
    while (n * n < sz(x)) ++ n;
    num = n;
    for (int i = 0; i < n; ++ i) {
        for (int j = 0; j < n; ++ j) {
            w[i][j] = x[i * n + j];
        }
    }
    for (int i = 0; i < n; ++ i) {
        if (w[i][i] != 0) {
            return vint{-1};
        }
    }
    for (int i = 0; i < n; ++ i) {
        for (int j = 0; j < n; ++ j) {
            if (w[i][j] != w[j][i]) {
                return vint{-1};
            }
        }
    }
    vint v;
    for (int i = 0; i < n; ++ i) {
        v.pb(i);
    }
    ans.clear();
    if (dfs(v)) {
        return ans;
    } else {
        return vint{-1};
    }
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	AllGraphCuts *obj;
	vector <int> answer;
	obj = new AllGraphCuts();
	clock_t startTime = clock();
	answer = obj->findGraph(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	
	{
	// ----- test 0 -----
	int t0[] = {0,1,1,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {6};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,2,2,2,0,2,2,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {10,11,14};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,1,2,3,4,1,0,2,3,4,1,2,0,3,4,1,2,3,0,4,1,2,3,4,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {-1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {0,2545,2348,2993,2606,2623,2013,3001,2626,2440,2495,2262,2342,2617,2773,2662,2736,2827,3044,3082,2545,0,2348,2545,2545,2545,2013,2545,2545,2440,2495,2262,2342,2545,2545,2545,2545,2545,2545,2545,2348,2348,0,2348,2348,2348,2013,2348,2348,2348,2348,2262,2342,2348,2348,2348,2348,2348,2348,2348,2993,2545,2348,0,2606,2623,2013,2993,2626,2440,2495,2262,2342,2617,2773,2662,2736,2827,2993,2993,2606,2545,2348,2606,0,2606,2013,2606,2606,2440,2495,2262,2342,2606,2606,2606,2606,2606,2606,2606,2623,2545,2348,2623,2606,0,2013,2623,2623,2440,2495,2262,2342,2617,2623,2623,2623,2623,2623,2623,2013,2013,2013,2013,2013,2013,0,2013,2013,2013,2013,2013,2013,2013,2013,2013,2013,2013,2013,2013,3001,2545,2348,2993,2606,2623,2013,0,2626,2440,2495,2262,2342,2617,2773,2662,2736,2827,3001,3001,2626,2545,2348,2626,2606,2623,2013,2626,0,2440,2495,2262,2342,2617,2626,2626,2626,2626,2626,2626,2440,2440,2348,2440,2440,2440,2013,2440,2440,0,2440,2262,2342,2440,2440,2440,2440,2440,2440,2440,2495,2495,2348,2495,2495,2495,2013,2495,2495,2440,0,2262,2342,2495,2495,2495,2495,2495,2495,2495,2262,2262,2262,2262,2262,2262,2013,2262,2262,2262,2262,0,2262,2262,2262,2262,2262,2262,2262,2262,2342,2342,2342,2342,2342,2342,2013,2342,2342,2342,2342,2262,0,2342,2342,2342,2342,2342,2342,2342,2617,2545,2348,2617,2606,2617,2013,2617,2617,2440,2495,2262,2342,0,2617,2617,2617,2617,2617,2617,2773,2545,2348,2773,2606,2623,2013,2773,2626,2440,2495,2262,2342,2617,0,2662,2736,2773,2773,2773,2662,2545,2348,2662,2606,2623,2013,2662,2626,2440,2495,2262,2342,2617,2662,0,2662,2662,2662,2662,2736,2545,2348,2736,2606,2623,2013,2736,2626,2440,2495,2262,2342,2617,2736,2662,0,2736,2736,2736,2827,2545,2348,2827,2606,2623,2013,2827,2626,2440,2495,2262,2342,2617,2773,2662,2736,0,2827,2827,3044,2545,2348,2993,2606,2623,2013,3001,2626,2440,2495,2262,2342,2617,2773,2662,2736,2827,0,3044,3082,2545,2348,2993,2606,2623,2013,3001,2626,2440,2495,2262,2342,2617,2773,2662,2736,2827,3044,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {76801,87602,76403,15604,14005,14406,95607,14408,45609,54010,113211,102812,53613,72414,10015,90416,110417,108818,76819,20022,5223,16824,14025,20426,37227,115628,118829,105230,39631,114032,70833,2434,9235,71636,3637,108438,68439,16443,24444,37245,54046,118447,46048,13249,38450,27651,23652,105253,76054,22455,112056,5657,82458,28859,31264,117665,73666,91667,11268,67269,110870,18471,114872,119673,22074,86075,44876,22477,74478,93679,96085,8486,59687,110088,1689,107290,56091,56092,74893,61294,109295,109296,18097,66498,20899,12506,98907,82908,77309,51710,110111,108112,22513,66514,43315,36516,19717,15318,26519,34127,70128,8929,20930,131,81732,80133,29334,68935,53336,81737,36538,57739,35348,96149,25750,19351,15752,4153,80554,107355,96556,70557,66958,48559,33769,81370,55771,15372,61373,72574,11375,2976,66577,108178,57779,590,78991,14992,10593,69794,47395,33796,113397,77398,68999,77811,28212,12613,64614,80215,9816,27017,30618,73819,46632,66633,7834,100635,636,7437,4238,76639,87453,16254,10255,31856,50257,18258,3459,73474,69475,63876,41077,3878,28679,13495,56696,109497,101098,116699,60316,107517,12318,98719,51137,91138,81139,108358,119959,106379};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
