#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <fstream>
#include <iostream>
#include <iomanip>
#include <string>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

#define pb push_back
#define mp make_pair
#define sz(v) ((int)(v).size())
#define all(v) (v).begin(), (v).end()
#define clr(v, e) memset(v, e, sizeof(v))
#define forn(i, n) for (int i = 0; i < (n); ++ i)
#define rep(i, a, b) for (int i = (a); i <= (b); ++ i)
#define forv(i, v) for (int i = 0; i < sz(v); ++ i)

typedef long long lint;
typedef vector<int> vint;
typedef vector<string> vs;
typedef pair<int,int> pint;
typedef vector<long long> vlint;

const int maxn = 2010;

vint maps[maxn];
int n, m, s, t, flag;
int dis[maxn], depth[maxn], w[maxn];

class WalkingToSchool {
public:
	string canWalkExactly(int, vector <int>, vector <int>);
};

void find_circle(const int p, const int u, const int e) {
    depth[u] = e;
    forv (i, maps[u]) {
        int v = maps[u][i];
        if (u == p && depth[v] == 1) flag = e;
        if (! depth[v]) find_circle(p, v, e + 1);
    }
}

void dfs(const int u, const int e) {
    dis[u] = e;
    forv (i, maps[u]) {
        int v = maps[u][i];
        if (dis[v]) {
            clr(depth, 0);
            flag = 0;
            find_circle(u, v, 1);
            if (depth[t]) ++ w[flag];
        } else {
            dfs(v, e + 1);
        }
    }
}

bool freedom(const int a, const int b) {
    s = a, t = b;
    clr(w, 0);
    clr(dis, 0);
    dfs(s, 1);
    
    int gcd = -1;
    if (dis[t]) {
        rep (i, 2, n) {
            if (w[i]) {
                gcd = (gcd == -1) ? i : __gcd(gcd, i);
            }
        }
    }
    return gcd == 1;
}

string WalkingToSchool::canWalkExactly(int N, vector<int> from, vector<int> to) {
    n = N, m = sz(to);
    forn (i, n) maps[i].clear();
	forn (i, m) maps[from[i]].pb(to[i]);
    return (freedom(0, 1) && freedom(1, 0)) ? "Freedom" : "Chores";
}


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, bool hasAnswer, string p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	WalkingToSchool *obj;
	string answer;
	obj = new WalkingToSchool();
	clock_t startTime = clock();
	answer = obj->canWalkExactly(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "\"" << p3 << "\"" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "\"" << answer << "\"" << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <int> p1;
	vector <int> p2;
	string p3;
	
	{
	// ----- test 0 -----
	p0 = 2;
	int t1[] = {0,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Chores";
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	int t1[] = {0,1,1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,0,2,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Freedom";
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 4;
	int t1[] = {0,2,2,3,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {2,0,3,0,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Chores";
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 10;
	int t1[] = {0,0,0,0,0,1,1,2,2,2,2,3,3,5,5,5,6,6,6,7,8,9,9,9,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {4,5,6,7,9,4,6,0,1,3,8,4,6,1,4,8,1,7,8,1,4,2,5,6,8};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Chores";
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 8;
	int t1[] = {0,1,4,6,7,5,2,3,0};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,4,6,7,5,2,3,0,7};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = "Freedom";
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 2000;
	p1.clear() /*{}*/;
	p2.clear() /*{}*/;
	p3 = "Chores";
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
